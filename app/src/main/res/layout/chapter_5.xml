<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_marginStart="10dp"
    android:layout_marginEnd="10dp">
    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="vertical">
        <Button
            android:id="@+id/Chap1Button"
            android:layout_width="fill_parent"
            android:layout_height="fill_parent"
            android:layout_marginStart="10dp"
            android:layout_marginTop="10dp"
            android:layout_marginEnd="10dp"
            android:text="Go Back To Main Page"
            android:onClick="renderMainPage"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintVertical_bias="1.0" />


        <TextView
            android:text="Atomic Operation"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="A function or action implemented as a sequence of one or more instructions that appears to be indivisible; that is, no other process can see an intermediate state or interrupt the operation. The sequence of instruction is guaranteed to execute as a group, or not execute at all, having no visible effect on system state. Atomicity guarantees isolation from concurrent processes."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
        <TextView
            android:text="Critical Section"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="A section of code within a process that requires access to shared resources, and that must not be executed while another process is in a corresponding section of code."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
        <TextView
            android:text="Deadlock"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="A situation in which two or more processes are unable to proceed because each is waiting for one of the others to do something."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
        <TextView
            android:text="Livelock"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="A situation in which two or more processes are unable to proceed because each is waiting for one of the others to do something."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
        <TextView
            android:text="Mutual Exclusion"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="The requirement that when one process is in a critical section that accesses shared resources, no other process may be in a critical section that accesses any of those shared resources."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
        <TextView
            android:text="Race Condition"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="A situation in which multiple threads or processes read and write a shared data item, and the final result depends on the relative timing of their execution."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
        <TextView
            android:text="Starvation"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="A situation in which a runnable process is overlooked indefinitely by the scheduler; although it is able to process, it is never chosen."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
        <TextView
            android:text="Semaphore"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="An integer value used for signaling among processes. Only three operations may be performed on a semaphore, all of which are atomic: initialize, decrement, and increment. The decrement operation may result in the blocking of a process, and the increment operation may result in the unblocking of a process. Also known as a counting semaphore or a general semaphore."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
        <TextView
            android:text="Binary Semaphore"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="A semaphore that takes on only the values 0 and 1."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
        <TextView
            android:text="Mutex"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="Similar to a binary semaphore. A key difference between the two is that the process that locks the mutex (sets the value to 0) must be the one to unlock it (sets the value to 1)."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
        <TextView
            android:text="Monitor"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="A programming language construct that encapsulates variables, access procedures, and initialization code within an abstract data type. The monitorâ€™s variable may only be accessed via its access procedures and only one process may be actively accessing the monitor at any one time. The access procedures are critical sections. A monitor may have a queue of processes that are waiting to access it."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
        <TextView
            android:text="Event Flags"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="A memory word used as a synchronization mechanism. Application code may associate a different event with each bit in a flag. A thread can wait for either a single event or a combination of events by checking one or multiple bits in the corresponding flag. The thread is blocked until all of the required bits are set (AND) or until at least one of the bits is set (OR)."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
        <TextView
            android:text="Spinlocks"
            android:textSize="20dp"
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="30dp" />
        <TextView
            android:text="Mutual exclusion mechanism in which a process executes in an infinite loop waiting for the value of a lock variable to indicate availability."
            android:textColor="@color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="10dp" />
    </LinearLayout>
</ScrollView>